// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \section:
   *   outline_processing
   *
   */


  /**************************************************************************
   *
   * \struct:
   *   FT_Outline
   *
   * \description:
   *   This structure is used to describe an outline to the scan-line
   *   converter.
   *
   * \fields:
   *   n_contours ::
   *     The number of contours in the outline.
   *
   *   n_points ::
   *     The number of points in the outline.
   *
   *   points ::
   *     A pointer to an array of {@code n_points} \FT_Vector elements, giving the
   *     outline's point coordinates.
   *
   *   tags ::
   *     A pointer to an array of {@code n_points} chars, giving each outline
   *     point's type.
   *
   *     If bit~0 is unset, the point is 'off' the curve, i.e., a Bezier
   *     control point, while it is 'on' if set.
   *
   *     Bit~1 is meaningful for 'off' points only.  If set, it indicates a
   *     third-order Bezier arc control point; and a second-order control
   *     point if unset.
   *
   *     If bit~2 is set, bits 5-7 contain the drop-out mode (as defined in
   *     the OpenType specification; the value is the same as the argument to
   *     the 'SCANMODE' instruction).
   *
   *     Bits 3 and~4 are reserved for internal purposes.
   *
   *   contours ::
   *     An array of {@code n_contours} shorts, giving the end point of each
   *     contour within the outline.  For example, the first contour is
   *     defined by the points '0' to {@code contours[0]}, the second one is
   *     defined by the points {@code contours[0]+1} to {@code contours[1]}, etc.
   *
   *   flags ::
   *     A set of bit flags used to characterize the outline and give hints
   *     to the scan-converter and hinter on how to convert/grid-fit it.  See
   *     \FT_OUTLINE_XXX.
   *
   * \note:
   *   The B/W rasterizer only checks bit~2 in the {@code tags} array for the first
   *   point of each contour.  The drop-out mode as given with
   *   \FT_OUTLINE_IGNORE_DROPOUTS, \FT_OUTLINE_SMART_DROPOUTS, and
   *   \FT_OUTLINE_INCLUDE_STUBS in {@code flags} is then overridden.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Outline extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_Outline() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_Outline(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Outline(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_Outline position(long position) {
          return (FT_Outline)super.position(position);
      }
  
    public native short n_contours(); public native FT_Outline n_contours(short setter);      /* number of contours in glyph        */
    public native short n_points(); public native FT_Outline n_points(short setter);        /* number of points in the glyph      */

    public native FT_Vector points(); public native FT_Outline points(FT_Vector setter);          /* the outline's points               */
    public native @Cast("char*") BytePointer tags(); public native FT_Outline tags(BytePointer setter);            /* the points flags                   */
    public native ShortPointer contours(); public native FT_Outline contours(ShortPointer setter);        /* the contour end points             */

    public native int flags(); public native FT_Outline flags(int setter);           /* outline masks                      */

  }
