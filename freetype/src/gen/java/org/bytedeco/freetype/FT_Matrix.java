// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \struct:
   *   FT_Matrix
   *
   * \description:
   *   A simple structure used to store a 2x2 matrix.  Coefficients are in
   *   16.16 fixed-point format.  The computation performed is:
   *
   *   <pre>{@code
   *     x' = x*xx + y*xy
   *     y' = x*yx + y*yy
   *   }</pre>
   *
   * \fields:
   *   xx ::
   *     Matrix coefficient.
   *
   *   xy ::
   *     Matrix coefficient.
   *
   *   yx ::
   *     Matrix coefficient.
   *
   *   yy ::
   *     Matrix coefficient.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Matrix extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_Matrix() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_Matrix(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Matrix(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_Matrix position(long position) {
          return (FT_Matrix)super.position(position);
      }
  
    public native @Cast("FT_Fixed") long xx(); public native FT_Matrix xx(long setter);
    public native @Cast("FT_Fixed") long xy(); public native FT_Matrix xy(long setter);
    public native @Cast("FT_Fixed") long yx(); public native FT_Matrix yx(long setter);
    public native @Cast("FT_Fixed") long yy(); public native FT_Matrix yy(long setter);

  }
