// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \struct:
   *   FT_Outline_Funcs
   *
   * \description:
   *   A structure to hold various function pointers used during outline
   *   decomposition in order to emit segments, conic, and cubic Beziers.
   *
   * \fields:
   *   move_to ::
   *     The 'move to' emitter.
   *
   *   line_to ::
   *     The segment emitter.
   *
   *   conic_to ::
   *     The second-order Bezier arc emitter.
   *
   *   cubic_to ::
   *     The third-order Bezier arc emitter.
   *
   *   shift ::
   *     The shift that is applied to coordinates before they are sent to the
   *     emitter.
   *
   *   delta ::
   *     The delta that is applied to coordinates before they are sent to the
   *     emitter, but after the shift.
   *
   * \note:
   *   The point coordinates sent to the emitters are the transformed version
   *   of the original coordinates (this is important for high accuracy
   *   during scan-conversion).  The transformation is simple:
   *
   *   <pre>{@code
   *     x' = (x << shift) - delta
   *     y' = (y << shift) - delta
   *   }</pre>
   *
   *   Set the values of {@code shift} and {@code delta} to~0 to get the original point
   *   coordinates.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Outline_Funcs extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_Outline_Funcs() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_Outline_Funcs(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Outline_Funcs(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_Outline_Funcs position(long position) {
          return (FT_Outline_Funcs)super.position(position);
      }
  
    public native FT_Outline_MoveToFunc move_to(); public native FT_Outline_Funcs move_to(FT_Outline_MoveToFunc setter);
    public native FT_Outline_LineToFunc line_to(); public native FT_Outline_Funcs line_to(FT_Outline_LineToFunc setter);
    public native FT_Outline_ConicToFunc conic_to(); public native FT_Outline_Funcs conic_to(FT_Outline_ConicToFunc setter);
    public native FT_Outline_CubicToFunc cubic_to(); public native FT_Outline_Funcs cubic_to(FT_Outline_CubicToFunc setter);

    public native int shift(); public native FT_Outline_Funcs shift(int setter);
    public native @Cast("FT_Pos") long delta(); public native FT_Outline_Funcs delta(long setter);

  }
