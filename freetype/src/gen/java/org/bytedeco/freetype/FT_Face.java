// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \section:
   *   base_interface
   *
   */

  /**************************************************************************
   *
   * \type:
   *   FT_Face
   *
   * \description:
   *   A handle to a typographic face object.  A face object models a given
   *   typeface, in a given style.
   *
   * \note:
   *   A face object also owns a single \FT_GlyphSlot object, as well as one
   *   or more \FT_Size objects.
   *
   *   Use \FT_New_Face or \FT_Open_Face to create a new face object from a
   *   given filepath or a custom input stream.
   *
   *   Use \FT_Done_Face to destroy it (along with its slot and sizes).
   *
   *   An {@code FT_Face} object can only be safely used from one thread at a time.
   *   Similarly, creation and destruction of {@code FT_Face} with the same
   *   \FT_Library object can only be done from one thread at a time.  On the
   *   other hand, functions like \FT_Load_Glyph and its siblings are
   *   thread-safe and do not need the lock to be held as long as the same
   *   {@code FT_Face} object is not used from multiple threads at the same time.
   *
   * \also:
   *   See \FT_FaceRec for the publicly accessible fields of a given face
   *   object.
   */
  @Name("FT_FaceRec_") @Opaque @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Face extends Pointer {
      /** Empty constructor. Calls {@code super((Pointer)null)}. */
      public FT_Face() { super((Pointer)null); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Face(Pointer p) { super(p); }
  }
