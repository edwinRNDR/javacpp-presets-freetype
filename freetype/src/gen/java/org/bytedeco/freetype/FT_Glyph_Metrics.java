// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



@Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Glyph_Metrics extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FT_Glyph_Metrics() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FT_Glyph_Metrics(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FT_Glyph_Metrics(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FT_Glyph_Metrics position(long position) {
        return (FT_Glyph_Metrics)super.position(position);
    }

    public native @Cast("FT_Pos") long width(); public native FT_Glyph_Metrics width(long setter);
    public native @Cast("FT_Pos") long height(); public native FT_Glyph_Metrics height(long setter);

    public native @Cast("FT_Pos") long horiBearingX(); public native FT_Glyph_Metrics horiBearingX(long setter);
    public native @Cast("FT_Pos") long horiBearingY(); public native FT_Glyph_Metrics horiBearingY(long setter);
    public native @Cast("FT_Pos") long horiAdvance(); public native FT_Glyph_Metrics horiAdvance(long setter);

    public native @Cast("FT_Pos") long vertBearingX(); public native FT_Glyph_Metrics vertBearingX(long setter);
    public native @Cast("FT_Pos") long vertBearingY(); public native FT_Glyph_Metrics vertBearingY(long setter);
    public native @Cast("FT_Pos") long vertAdvance(); public native FT_Glyph_Metrics vertAdvance(long setter);

  }
