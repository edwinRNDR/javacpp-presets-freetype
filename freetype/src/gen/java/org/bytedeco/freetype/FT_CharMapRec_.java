// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \type:
   *   FT_CharMap
   *
   * \description:
   *   A handle to a character map (usually abbreviated to 'charmap').  A
   *   charmap is used to translate character codes in a given encoding into
   *   glyph indexes for its parent's face.  Some font formats may provide
   *   several charmaps per font.
   *
   *   Each face object owns zero or more charmaps, but only one of them can
   *   be 'active', providing the data used by \FT_Get_Char_Index or
   *   \FT_Load_Char.
   *
   *   The list of available charmaps in a face is available through the
   *   {@code face->num_charmaps} and {@code face->charmaps} fields of \FT_FaceRec.
   *
   *   The currently active charmap is available as {@code face->charmap}.  You
   *   should call \FT_Set_Charmap to change it.
   *
   * \note:
   *   When a new face is created (either through \FT_New_Face or
   *   \FT_Open_Face), the library looks for a Unicode charmap within the
   *   list and automatically activates it.  If there is no Unicode charmap,
   *   FreeType doesn't set an 'active' charmap.
   *
   * \also:
   *   See \FT_CharMapRec for the publicly accessible fields of a given
   *   character map.
   */
  @Opaque @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_CharMapRec_ extends Pointer {
      /** Empty constructor. Calls {@code super((Pointer)null)}. */
      public FT_CharMapRec_() { super((Pointer)null); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_CharMapRec_(Pointer p) { super(p); }
  }
