// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \struct:
   *   FT_ListNodeRec
   *
   * \description:
   *   A structure used to hold a single list element.
   *
   * \fields:
   *   prev ::
   *     The previous element in the list.  {@code NULL} if first.
   *
   *   next ::
   *     The next element in the list.  {@code NULL} if last.
   *
   *   data ::
   *     A typeless pointer to the listed object.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_ListNodeRec extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_ListNodeRec() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_ListNodeRec(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_ListNodeRec(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_ListNodeRec position(long position) {
          return (FT_ListNodeRec)super.position(position);
      }
  
    public native FT_ListNode prev(); public native FT_ListNodeRec prev(FT_ListNode setter);
    public native FT_ListNode next(); public native FT_ListNodeRec next(FT_ListNode setter);
    public native Pointer data(); public native FT_ListNodeRec data(Pointer setter);

  }
