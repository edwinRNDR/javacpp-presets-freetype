// Targeted by JavaCPP version 1.5.2: DO NOT EDIT THIS FILE

package org.bytedeco.dnnl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.dnnl.global.dnnl.*;


/** \}
 <p>
 *  \}
 <p>
 *  \addtogroup cpp_api_primitives Primitives
 *  \{
 <p>
 *  \addtogroup cpp_api_primitive_descriptors Primitive descriptors
 *  \{
 <p>
 *  A base class for descriptors of all primitives that have an operation
 *  descriptor and that support iteration over multiple implementations. */
@Name("dnnl::primitive_desc") @NoOffset @Properties(inherit = org.bytedeco.dnnl.presets.dnnl.class)
public class primitive_desc extends primitive_desc_base {
    static { Loader.load(); }

    
    
        public primitive_desc() { super((Pointer)null); allocate(); }
        private native void allocate();
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public primitive_desc(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public primitive_desc(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public primitive_desc position(long position) {
        return (primitive_desc)super.position(position);
    }


    /** Creates a primitive descriptor from given \p op_desc, \p attr, \p
     *  engine, and optionally a hint primitive descriptor from forward
     *  propagation. If allow_empty is true, the constructor does not throw if
     *  a primitive_desc cannot be created. But calling next_impl() in this
     *  case *will* throw. */
    
    ///
    public primitive_desc(const_dnnl_op_desc_t desc, @Const primitive_attr attr,
                @Const @ByRef engine e, @Const dnnl_primitive_desc hint_fwd_pd,
                @Cast("bool") boolean allow_empty/*=false*/) { super((Pointer)null); allocate(desc, attr, e, hint_fwd_pd, allow_empty); }
    private native void allocate(const_dnnl_op_desc_t desc, @Const primitive_attr attr,
                @Const @ByRef engine e, @Const dnnl_primitive_desc hint_fwd_pd,
                @Cast("bool") boolean allow_empty/*=false*/);
    public primitive_desc(const_dnnl_op_desc_t desc, @Const primitive_attr attr,
                @Const @ByRef engine e, @Const dnnl_primitive_desc hint_fwd_pd) { super((Pointer)null); allocate(desc, attr, e, hint_fwd_pd); }
    private native void allocate(const_dnnl_op_desc_t desc, @Const primitive_attr attr,
                @Const @ByRef engine e, @Const dnnl_primitive_desc hint_fwd_pd);

    /** Advances the next implementation for the given op descriptor.
     * 
     *  Returns:
     *  - \c true on success
     *  - \c false if the last implementation reached, and
     *    the primitive descriptor itself is kept unchanged */
    public native @Cast("bool") boolean next_impl();
}
