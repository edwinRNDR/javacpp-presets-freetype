// Targeted by JavaCPP version 1.5.2: DO NOT EDIT THIS FILE

package org.bytedeco.dnnl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.dnnl.global.dnnl.*;


/** \}
 <p>
 *  \addtogroup cpp_api_binary Binary
 *  A primitive to perform tensor operations over two tensors.
 * 
 *  @see \ref dev_guide_binary in developer guide
 *  @see \ref c_api_binary in \ref c_api
 *  \{
 <p>
 *  Implements descriptor, primitive descriptor, and primitive
 *  for the binary. */
@Namespace("dnnl") @Properties(inherit = org.bytedeco.dnnl.presets.dnnl.class)
public class binary extends primitive {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public binary(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public binary(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public binary position(long position) {
        return (binary)super.position(position);
    }


    /** Descriptor for binary. */
    @NoOffset public static class desc extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public desc(Pointer p) { super(p); }
    
        public native @ByRef dnnl_binary_desc_t data(); public native desc data(dnnl_binary_desc_t setter);

        /** Initializes a binary descriptor using \p algorithm, memory
         *  descriptors \p src0_desc, \p src1_desc and \p dst_desc. */
        public desc(algorithm aalgorithm, @Const @ByRef memory.desc src0,
                        @Const @ByRef memory.desc src1, @Const @ByRef memory.desc dst) { super((Pointer)null); allocate(aalgorithm, src0, src1, dst); }
        private native void allocate(algorithm aalgorithm, @Const @ByRef memory.desc src0,
                        @Const @ByRef memory.desc src1, @Const @ByRef memory.desc dst);
        public desc(@Cast("dnnl::algorithm") int aalgorithm, @Const @ByRef memory.desc src0,
                        @Const @ByRef memory.desc src1, @Const @ByRef memory.desc dst) { super((Pointer)null); allocate(aalgorithm, src0, src1, dst); }
        private native void allocate(@Cast("dnnl::algorithm") int aalgorithm, @Const @ByRef memory.desc src0,
                        @Const @ByRef memory.desc src1, @Const @ByRef memory.desc dst);
    }

    public static class primitive_desc extends org.bytedeco.dnnl.primitive_desc {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public primitive_desc(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public primitive_desc(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public primitive_desc position(long position) {
            return (primitive_desc)super.position(position);
        }
    
        public primitive_desc() { super((Pointer)null); allocate(); }
        private native void allocate();

        /** Initializes a primitive descriptor for binary. */
        public primitive_desc(
                        @Const @ByRef desc desc, @Const @ByRef engine e, @Cast("bool") boolean allow_empty/*=false*/) { super((Pointer)null); allocate(desc, e, allow_empty); }
        private native void allocate(
                        @Const @ByRef desc desc, @Const @ByRef engine e, @Cast("bool") boolean allow_empty/*=false*/);
        public primitive_desc(
                        @Const @ByRef desc desc, @Const @ByRef engine e) { super((Pointer)null); allocate(desc, e); }
        private native void allocate(
                        @Const @ByRef desc desc, @Const @ByRef engine e);

        /** Initializes a primitive descriptor for binary with attributes
         *  defined by \p attr. */
        public primitive_desc(
                        @Const @ByRef desc desc, @Const @ByRef primitive_attr attr, @Const @ByRef engine e) { super((Pointer)null); allocate(desc, attr, e); }
        private native void allocate(
                        @Const @ByRef desc desc, @Const @ByRef primitive_attr attr, @Const @ByRef engine e);

        /** Initializes a primitive descriptor for binary from a C primitive
         *  descriptor \p pd. */
        public primitive_desc(dnnl_primitive_desc pd) { super((Pointer)null); allocate(pd); }
        private native void allocate(dnnl_primitive_desc pd);

        /** Queries source 0 memory descriptor. */
        public native @ByVal memory.desc src0_desc();

        /** Queries source 1 memory descriptor. */
        public native @ByVal memory.desc src1_desc();

        /** Queries destination memory descriptor. */
        public native @ByVal memory.desc dst_desc();
    }

    public binary() { super((Pointer)null); allocate(); }
    private native void allocate();

    public binary(@Const @ByRef primitive_desc pd) { super((Pointer)null); allocate(pd); }
    private native void allocate(@Const @ByRef primitive_desc pd);
}
