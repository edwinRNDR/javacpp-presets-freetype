// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \functype:
   *   FT_Raster_RenderFunc
   *
   * \description:
   *   Invoke a given raster to scan-convert a given glyph image into a
   *   target bitmap.
   *
   * \input:
   *   raster ::
   *     A handle to the raster object.
   *
   *   params ::
   *     A pointer to an \FT_Raster_Params structure used to store the
   *     rendering parameters.
   *
   * @return :
   *   Error code.  0~means success.
   *
   * \note:
   *   The exact format of the source image depends on the raster's glyph
   *   format defined in its \FT_Raster_Funcs structure.  It can be an
   *   \FT_Outline or anything else in order to support a large array of
   *   glyph formats.
   *
   *   Note also that the render function can fail and return a
   *   {@code FT_Err_Unimplemented_Feature} error code if the raster used does not
   *   support direct composition.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Raster_RenderFunc extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    FT_Raster_RenderFunc(Pointer p) { super(p); }
      protected FT_Raster_RenderFunc() { allocate(); }
      private native void allocate();
      public native int call( FT_Raster raster,
                             @Const FT_Raster_Params params );
  }
