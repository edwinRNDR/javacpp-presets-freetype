// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \struct:
   *   FT_MemoryRec
   *
   * \description:
   *   A structure used to describe a given memory manager to FreeType~2.
   *
   * \fields:
   *   user ::
   *     A generic typeless pointer for user data.
   *
   *   alloc ::
   *     A pointer type to an allocation function.
   *
   *   free ::
   *     A pointer type to an memory freeing function.
   *
   *   realloc ::
   *     A pointer type to a reallocation function.
   *
   */
  @Name("FT_MemoryRec_") @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Memory extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_Memory() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_Memory(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Memory(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_Memory position(long position) {
          return (FT_Memory)super.position(position);
      }
  
    public native Pointer user(); public native FT_Memory user(Pointer setter);
    public native FT_Alloc_Func alloc(); public native FT_Memory alloc(FT_Alloc_Func setter);
    public native @Name("free") FT_Free_Func _free(); public native FT_Memory _free(FT_Free_Func setter);
    public native FT_Realloc_Func realloc(); public native FT_Memory realloc(FT_Realloc_Func setter);
  }
