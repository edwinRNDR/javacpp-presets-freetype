// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \struct:
   *   FT_Bitmap
   *
   * \description:
   *   A structure used to describe a bitmap or pixmap to the raster.  Note
   *   that we now manage pixmaps of various depths through the {@code pixel_mode}
   *   field.
   *
   * \fields:
   *   rows ::
   *     The number of bitmap rows.
   *
   *   width ::
   *     The number of pixels in bitmap row.
   *
   *   pitch ::
   *     The pitch's absolute value is the number of bytes taken by one
   *     bitmap row, including padding.  However, the pitch is positive when
   *     the bitmap has a 'down' flow, and negative when it has an 'up' flow.
   *     In all cases, the pitch is an offset to add to a bitmap pointer in
   *     order to go down one row.
   *
   *     Note that 'padding' means the alignment of a bitmap to a byte
   *     border, and FreeType functions normally align to the smallest
   *     possible integer value.
   *
   *     For the B/W rasterizer, {@code pitch} is always an even number.
   *
   *     To change the pitch of a bitmap (say, to make it a multiple of 4),
   *     use \FT_Bitmap_Convert.  Alternatively, you might use callback
   *     functions to directly render to the application's surface; see the
   *     file {@code example2.cpp} in the tutorial for a demonstration.
   *
   *   buffer ::
   *     A typeless pointer to the bitmap buffer.  This value should be
   *     aligned on 32-bit boundaries in most cases.
   *
   *   num_grays ::
   *     This field is only used with \FT_PIXEL_MODE_GRAY; it gives the
   *     number of gray levels used in the bitmap.
   *
   *   pixel_mode ::
   *     The pixel mode, i.e., how pixel bits are stored.  See \FT_Pixel_Mode
   *     for possible values.
   *
   *   palette_mode ::
   *     This field is intended for paletted pixel modes; it indicates how
   *     the palette is stored.  Not used currently.
   *
   *   palette ::
   *     A typeless pointer to the bitmap palette; this field is intended for
   *     paletted pixel modes.  Not used currently.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Bitmap extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_Bitmap() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_Bitmap(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Bitmap(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_Bitmap position(long position) {
          return (FT_Bitmap)super.position(position);
      }
  
    public native @Cast("unsigned int") int rows(); public native FT_Bitmap rows(int setter);
    public native @Cast("unsigned int") int width(); public native FT_Bitmap width(int setter);
    public native int pitch(); public native FT_Bitmap pitch(int setter);
    public native @Cast("unsigned char*") BytePointer buffer(); public native FT_Bitmap buffer(BytePointer setter);
    public native @Cast("unsigned short") short num_grays(); public native FT_Bitmap num_grays(short setter);
    public native @Cast("unsigned char") byte pixel_mode(); public native FT_Bitmap pixel_mode(byte setter);
    public native @Cast("unsigned char") byte palette_mode(); public native FT_Bitmap palette_mode(byte setter);
    public native Pointer palette(); public native FT_Bitmap palette(Pointer setter);

  }
