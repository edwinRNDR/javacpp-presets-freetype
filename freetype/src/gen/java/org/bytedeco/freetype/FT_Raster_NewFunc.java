// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \functype:
   *   FT_Raster_NewFunc
   *
   * \description:
   *   A function used to create a new raster object.
   *
   * \input:
   *   memory ::
   *     A handle to the memory allocator.
   *
   * \output:
   *   raster ::
   *     A handle to the new raster object.
   *
   * @return :
   *   Error code.  0~means success.
   *
   * \note:
   *   The {@code memory} parameter is a typeless pointer in order to avoid
   *   un-wanted dependencies on the rest of the FreeType code.  In practice,
   *   it is an \FT_Memory object, i.e., a handle to the standard FreeType
   *   memory allocator.  However, this field can be completely ignored by a
   *   given raster implementation.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Raster_NewFunc extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    FT_Raster_NewFunc(Pointer p) { super(p); }
      protected FT_Raster_NewFunc() { allocate(); }
      private native void allocate();
      public native int call( Pointer memory,
                          @Cast("FT_Raster*") PointerPointer raster );
  }
