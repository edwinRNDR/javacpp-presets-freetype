// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \struct:
   *   FT_Size_Metrics
   *
   * \description:
   *   The size metrics structure gives the metrics of a size object.
   *
   * \fields:
   *   x_ppem ::
   *     The width of the scaled EM square in pixels, hence the term 'ppem'
   *     (pixels per EM).  It is also referred to as 'nominal width'.
   *
   *   y_ppem ::
   *     The height of the scaled EM square in pixels, hence the term 'ppem'
   *     (pixels per EM).  It is also referred to as 'nominal height'.
   *
   *   x_scale ::
   *     A 16.16 fractional scaling value to convert horizontal metrics from
   *     font units to 26.6 fractional pixels.  Only relevant for scalable
   *     font formats.
   *
   *   y_scale ::
   *     A 16.16 fractional scaling value to convert vertical metrics from
   *     font units to 26.6 fractional pixels.  Only relevant for scalable
   *     font formats.
   *
   *   ascender ::
   *     The ascender in 26.6 fractional pixels, rounded up to an integer
   *     value.  See \FT_FaceRec for the details.
   *
   *   descender ::
   *     The descender in 26.6 fractional pixels, rounded down to an integer
   *     value.  See \FT_FaceRec for the details.
   *
   *   height ::
   *     The height in 26.6 fractional pixels, rounded to an integer value.
   *     See \FT_FaceRec for the details.
   *
   *   max_advance ::
   *     The maximum advance width in 26.6 fractional pixels, rounded to an
   *     integer value.  See \FT_FaceRec for the details.
   *
   * \note:
   *   The scaling values, if relevant, are determined first during a size
   *   changing operation.  The remaining fields are then set by the driver.
   *   For scalable formats, they are usually set to scaled values of the
   *   corresponding fields in \FT_FaceRec.  Some values like ascender or
   *   descender are rounded for historical reasons; more precise values (for
   *   outline fonts) can be derived by scaling the corresponding \FT_FaceRec
   *   values manually, with code similar to the following.
   *
   *   <pre>{@code
   *     scaled_ascender = FT_MulFix( face->ascender,
   *                                  size_metrics->y_scale );
   *   }</pre>
   *
   *   Note that due to glyph hinting and the selected rendering mode these
   *   values are usually not exact; consequently, they must be treated as
   *   unreliable with an error margin of at least one pixel!
   *
   *   Indeed, the only way to get the exact metrics is to render _all_
   *   glyphs.  As this would be a definite performance hit, it is up to
   *   client applications to perform such computations.
   *
   *   The {@code FT_Size_Metrics} structure is valid for bitmap fonts also.
   *
   *
   *   **TrueType fonts with native bytecode hinting**
   *
   *   All applications that handle TrueType fonts with native hinting must
   *   be aware that TTFs expect different rounding of vertical font
   *   dimensions.  The application has to cater for this, especially if it
   *   wants to rely on a TTF's vertical data (for example, to properly align
   *   box characters vertically).
   *
   *   Only the application knows _in advance_ that it is going to use native
   *   hinting for TTFs!  FreeType, on the other hand, selects the hinting
   *   mode not at the time of creating an \FT_Size object but much later,
   *   namely while calling \FT_Load_Glyph.
   *
   *   Here is some pseudo code that illustrates a possible solution.
   *
   *   <pre>{@code
   *     font_format = FT_Get_Font_Format( face );
   *
   *     if ( !strcmp( font_format, "TrueType" ) &&
   *          do_native_bytecode_hinting         )
   *     {
   *       ascender  = ROUND( FT_MulFix( face->ascender,
   *                                     size_metrics->y_scale ) );
   *       descender = ROUND( FT_MulFix( face->descender,
   *                                     size_metrics->y_scale ) );
   *     }
   *     else
   *     {
   *       ascender  = size_metrics->ascender;
   *       descender = size_metrics->descender;
   *     }
   *
   *     height      = size_metrics->height;
   *     max_advance = size_metrics->max_advance;
   *   }</pre>
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Size_Metrics extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_Size_Metrics() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_Size_Metrics(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Size_Metrics(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_Size_Metrics position(long position) {
          return (FT_Size_Metrics)super.position(position);
      }
  
    public native @Cast("FT_UShort") short x_ppem(); public native FT_Size_Metrics x_ppem(short setter);      /* horizontal pixels per EM               */
    public native @Cast("FT_UShort") short y_ppem(); public native FT_Size_Metrics y_ppem(short setter);      /* vertical pixels per EM                 */

    public native @Cast("FT_Fixed") long x_scale(); public native FT_Size_Metrics x_scale(long setter);     /* scaling values used to convert font    */
    public native @Cast("FT_Fixed") long y_scale(); public native FT_Size_Metrics y_scale(long setter);     /* units to 26.6 fractional pixels        */

    public native @Cast("FT_Pos") long ascender(); public native FT_Size_Metrics ascender(long setter);    /* ascender in 26.6 frac. pixels          */
    public native @Cast("FT_Pos") long descender(); public native FT_Size_Metrics descender(long setter);   /* descender in 26.6 frac. pixels         */
    public native @Cast("FT_Pos") long height(); public native FT_Size_Metrics height(long setter);      /* text height in 26.6 frac. pixels       */
    public native @Cast("FT_Pos") long max_advance(); public native FT_Size_Metrics max_advance(long setter); /* max horizontal advance, in 26.6 pixels */

  }
