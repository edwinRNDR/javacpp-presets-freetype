// Targeted by JavaCPP version 1.5.2: DO NOT EDIT THIS FILE

package org.bytedeco.dnnl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.dnnl.global.dnnl.*;

/** \endcond
 <p>
 *  \addtogroup c_api C API
 *  \{
 * 
 *  \addtogroup c_api_types Types
 *  \{
 * 
 *  \addtogroup c_api_types_generic Generic
 *  \{
 <p>
 *  Version type */
@Properties(inherit = org.bytedeco.dnnl.presets.dnnl.class)
public class dnnl_version_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public dnnl_version_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public dnnl_version_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public dnnl_version_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public dnnl_version_t position(long position) {
        return (dnnl_version_t)super.position(position);
    }

    public native int major(); public native dnnl_version_t major(int setter);
    public native int minor(); public native dnnl_version_t minor(int setter);
    public native int patch(); public native dnnl_version_t patch(int setter);
    public native @Cast("const char*") BytePointer hash(); public native dnnl_version_t hash(BytePointer setter);
}
