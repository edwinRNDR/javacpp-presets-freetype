// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \section:
   *   layer_management
   *
   * \title:
   *   Glyph Layer Management
   *
   * \abstract:
   *   Retrieving and manipulating OpenType's 'COLR' table data.
   *
   * \description:
   *   The functions described here allow access of colored glyph layer data
   *   in OpenType's 'COLR' tables.
   */


  /**************************************************************************
   *
   * \struct:
   *   FT_LayerIterator
   *
   * \description:
   *   This iterator object is needed for \FT_Get_Color_Glyph_Layer.
   *
   * \fields:
   *   num_layers ::
   *     The number of glyph layers for the requested glyph index.  Will be
   *     set by \FT_Get_Color_Glyph_Layer.
   *
   *   layer ::
   *     The current layer.  Will be set by \FT_Get_Color_Glyph_Layer.
   *
   *   p ::
   *     An opaque pointer into 'COLR' table data.  The caller must set this
   *     to {@code NULL} before the first call of \FT_Get_Color_Glyph_Layer.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_LayerIterator extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_LayerIterator() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_LayerIterator(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_LayerIterator(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_LayerIterator position(long position) {
          return (FT_LayerIterator)super.position(position);
      }
  
    public native @Cast("FT_UInt") int num_layers(); public native FT_LayerIterator num_layers(int setter);
    public native @Cast("FT_UInt") int layer(); public native FT_LayerIterator layer(int setter);
    public native @Cast("FT_Byte*") BytePointer p(); public native FT_LayerIterator p(BytePointer setter);

  }
