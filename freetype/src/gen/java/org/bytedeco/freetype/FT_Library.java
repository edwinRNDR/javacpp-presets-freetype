// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /*************************************************************************/
  /*************************************************************************/
  /*                                                                       */
  /*                     O B J E C T   C L A S S E S                       */
  /*                                                                       */
  /*************************************************************************/
  /*************************************************************************/

  /**************************************************************************
   *
   * \type:
   *   FT_Library
   *
   * \description:
   *   A handle to a FreeType library instance.  Each 'library' is completely
   *   independent from the others; it is the 'root' of a set of objects like
   *   fonts, faces, sizes, etc.
   *
   *   It also embeds a memory manager (see \FT_Memory), as well as a
   *   scan-line converter object (see \FT_Raster).
   *
   *   [Since 2.5.6] In multi-threaded applications it is easiest to use one
   *   {@code FT_Library} object per thread.  In case this is too cumbersome, a
   *   single {@code FT_Library} object across threads is possible also, as long as
   *   a mutex lock is used around \FT_New_Face and \FT_Done_Face.
   *
   * \note:
   *   Library objects are normally created by \FT_Init_FreeType, and
   *   destroyed with \FT_Done_FreeType.  If you need reference-counting
   *   (cf. \FT_Reference_Library), use \FT_New_Library and \FT_Done_Library.
   */
  @Name("FT_LibraryRec_") @Opaque @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Library extends Pointer {
      /** Empty constructor. Calls {@code super((Pointer)null)}. */
      public FT_Library() { super((Pointer)null); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Library(Pointer p) { super(p); }
  }
