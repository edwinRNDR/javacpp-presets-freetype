// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \functype:
   *   FT_SpanFunc
   *
   * \description:
   *   A function used as a call-back by the anti-aliased renderer in order
   *   to let client applications draw themselves the gray pixel spans on
   *   each scan line.
   *
   * \input:
   *   y ::
   *     The scanline's upward y~coordinate.
   *
   *   count ::
   *     The number of spans to draw on this scanline.
   *
   *   spans ::
   *     A table of {@code count} spans to draw on the scanline.
   *
   *   user ::
   *     User-supplied data that is passed to the callback.
   *
   * \note:
   *   This callback allows client applications to directly render the gray
   *   spans of the anti-aliased bitmap to any kind of surfaces.
   *
   *   This can be used to write anti-aliased outlines directly to a given
   *   background bitmap, and even perform translucency.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_SpanFunc extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    FT_SpanFunc(Pointer p) { super(p); }
      protected FT_SpanFunc() { allocate(); }
      private native void allocate();
      public native void call( int y,
                    int count,
                    @Const FT_Span spans,
                    Pointer user );
  }
