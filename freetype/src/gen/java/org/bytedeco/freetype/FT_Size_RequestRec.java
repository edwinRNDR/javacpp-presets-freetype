// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \struct:
   *   FT_Size_RequestRec
   *
   * \description:
   *   A structure to model a size request.
   *
   * \fields:
   *   type ::
   *     See \FT_Size_Request_Type.
   *
   *   width ::
   *     The desired width, given as a 26.6 fractional point value (with 72pt
   *     = 1in).
   *
   *   height ::
   *     The desired height, given as a 26.6 fractional point value (with
   *     72pt = 1in).
   *
   *   horiResolution ::
   *     The horizontal resolution (dpi, i.e., pixels per inch).  If set to
   *     zero, {@code width} is treated as a 26.6 fractional **pixel** value, which
   *     gets internally rounded to an integer.
   *
   *   vertResolution ::
   *     The vertical resolution (dpi, i.e., pixels per inch).  If set to
   *     zero, {@code height} is treated as a 26.6 fractional **pixel** value,
   *     which gets internally rounded to an integer.
   *
   * \note:
   *   If {@code width} is zero, the horizontal scaling value is set equal to the
   *   vertical scaling value, and vice versa.
   *
   *   If {@code type} is {@code FT_SIZE_REQUEST_TYPE_SCALES}, {@code width} and {@code height} are
   *   interpreted directly as 16.16 fractional scaling values, without any
   *   further modification, and both {@code horiResolution} and {@code vertResolution}
   *   are ignored.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Size_RequestRec extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_Size_RequestRec() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_Size_RequestRec(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Size_RequestRec(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_Size_RequestRec position(long position) {
          return (FT_Size_RequestRec)super.position(position);
      }
  
    public native @Cast("FT_Size_Request_Type") int type(); public native FT_Size_RequestRec type(int setter);
    public native @Cast("FT_Long") long width(); public native FT_Size_RequestRec width(long setter);
    public native @Cast("FT_Long") long height(); public native FT_Size_RequestRec height(long setter);
    public native @Cast("FT_UInt") int horiResolution(); public native FT_Size_RequestRec horiResolution(int setter);
    public native @Cast("FT_UInt") int vertResolution(); public native FT_Size_RequestRec vertResolution(int setter);

  }
