// Targeted by JavaCPP version 1.5.2: DO NOT EDIT THIS FILE

package org.bytedeco.dnnl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.dnnl.global.dnnl.*;

/** \endcond
 <p>
 *  An execution stream. */
@Namespace("dnnl") @Properties(inherit = org.bytedeco.dnnl.presets.dnnl.class)
public class stream extends dnnl_stream_handle {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public stream(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public stream(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public stream position(long position) {
        return (stream)super.position(position);
    }


    /** \brief Stream flags. */
    public enum flags {
        /** Default order execution. Either in-order or out-of-order depending
         *  on the engine runtime */
        default_order(dnnl_stream_default_order),
        /** In-order execution. */
        in_order(dnnl_stream_default_order),
        /** Out-of-order execution. */
        out_of_order(dnnl_stream_out_of_order),
        /** Default stream configuration. */
        default_flags(dnnl_stream_default_flags);

        public final int value;
        private flags(int v) { this.value = v; }
        private flags(flags e) { this.value = e.value; }
        public flags intern() { for (flags e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }

    public stream() { super((Pointer)null); allocate(); }
    private native void allocate();

    /** Constructs a stream. */
    public stream(@Const @ByRef engine aengine, @ByVal(nullValue = "dnnl::stream::flags::default_flags") flags aflags) { super((Pointer)null); allocate(aengine, aflags); }
    private native void allocate(@Const @ByRef engine aengine, @ByVal(nullValue = "dnnl::stream::flags::default_flags") flags aflags);
    public stream(@Const @ByRef engine aengine) { super((Pointer)null); allocate(aengine); }
    private native void allocate(@Const @ByRef engine aengine);

// #if DNNL_GPU_RUNTIME == DNNL_RUNTIME_OCL
// #endif

    /** Waits for all primitives in the stream to finish. */
    public native @ByRef @Name("wait") stream _wait();
}
