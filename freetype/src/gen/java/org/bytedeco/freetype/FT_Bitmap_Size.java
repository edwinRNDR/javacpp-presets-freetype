// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \struct:
   *   FT_Bitmap_Size
   *
   * \description:
   *   This structure models the metrics of a bitmap strike (i.e., a set of
   *   glyphs for a given point size and resolution) in a bitmap font.  It is
   *   used for the {@code available_sizes} field of \FT_Face.
   *
   * \fields:
   *   height ::
   *     The vertical distance, in pixels, between two consecutive baselines.
   *     It is always positive.
   *
   *   width ::
   *     The average width, in pixels, of all glyphs in the strike.
   *
   *   size ::
   *     The nominal size of the strike in 26.6 fractional points.  This
   *     field is not very useful.
   *
   *   x_ppem ::
   *     The horizontal ppem (nominal width) in 26.6 fractional pixels.
   *
   *   y_ppem ::
   *     The vertical ppem (nominal height) in 26.6 fractional pixels.
   *
   * \note:
   *   Windows FNT:
   *     The nominal size given in a FNT font is not reliable.  If the driver
   *     finds it incorrect, it sets {@code size} to some calculated values, and
   *     {@code x_ppem} and {@code y_ppem} to the pixel width and height given in the
   *     font, respectively.
   *
   *   TrueType embedded bitmaps:
   *     {@code size}, {@code width}, and {@code height} values are not contained in the bitmap
   *     strike itself.  They are computed from the global font parameters.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Bitmap_Size extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_Bitmap_Size() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_Bitmap_Size(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Bitmap_Size(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_Bitmap_Size position(long position) {
          return (FT_Bitmap_Size)super.position(position);
      }
  
    public native @Cast("FT_Short") short height(); public native FT_Bitmap_Size height(short setter);
    public native @Cast("FT_Short") short width(); public native FT_Bitmap_Size width(short setter);

    public native @Cast("FT_Pos") long size(); public native FT_Bitmap_Size size(long setter);

    public native @Cast("FT_Pos") long x_ppem(); public native FT_Bitmap_Size x_ppem(long setter);
    public native @Cast("FT_Pos") long y_ppem(); public native FT_Bitmap_Size y_ppem(long setter);

  }
