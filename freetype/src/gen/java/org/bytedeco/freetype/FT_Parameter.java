// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.freetype;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.freetype.global.freetype.*;



  /**************************************************************************
   *
   * \struct:
   *   FT_Parameter
   *
   * \description:
   *   A simple structure to pass more or less generic parameters to
   *   \FT_Open_Face and \FT_Face_Properties.
   *
   * \fields:
   *   tag ::
   *     A four-byte identification tag.
   *
   *   data ::
   *     A pointer to the parameter data.
   *
   * \note:
   *   The ID and function of parameters are driver-specific.  See section
   *   \parameter_tags for more information.
   */
  @Properties(inherit = org.bytedeco.freetype.presets.freetype.class)
public class FT_Parameter extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public FT_Parameter() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public FT_Parameter(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public FT_Parameter(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public FT_Parameter position(long position) {
          return (FT_Parameter)super.position(position);
      }
  
    public native @Cast("FT_ULong") long tag(); public native FT_Parameter tag(long setter);
    public native FT_Pointer data(); public native FT_Parameter data(FT_Pointer setter);

  }
